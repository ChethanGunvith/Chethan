Below are the Scoping function of Kotlin

Kotlin let, run, also, apply, with

its very simple to understand this, I read many of the article they made complicated , let me put this in my way. 

Kotlin let, run, also, apply, with , we call these as scoping function in kotlin. 

let's understand each one of this - 

Let : let takes the invoked object  as  parameter and returns the result of the lambda expression

fun main(args: Array<String>) {
    var str = "Hello World" 
    str.let { 
      it + "kotlin"
      println("$it!!") //  returns the result of the lambda expression
      }
    println(str) 

}
//Prints
//Hello World!!
//Hello World



Additionally, let is useful for checking Nullable properties as shown below.

var name : String? = "Kotlin let null check"
name?.let { println(it) } //prints Kotlin let null check
name = null
name?.let { println(it) } //nothing happens

The code inside the let expression is executed only when the property is not null. Thus let saves us from the if else null checker too!


Kotlin run

Similar to the let function, the run function also returns the last statement.
Unlike let, the run function doesnâ€™t support the it keyword.


Kotlin also :

it takes called object reference 
it returns the original object instead of any new return data. Hence the return data has always the same type.

var m = 1
m = m.also { it + 1 }.also { it + 1 }
println(m) //prints 1 


example 2- 
data class Person(var name: String, var tutorial : String)
var person = Person("Chethan", "Kotlin")

var l = person.let { it.tutorial = "Android" }
var al = person.also { it.tutorial = "Android" }
    
println(l)
println(al)
println(person)

Output : 
Kotlin.unit
Person(name = Chethan, tutorial = Android)
Person(name = Chethan, tutorial = Android)


Kotlin apply : 
it takes called object reference 
it returns object reference on completion.

Example - 1 : 

data class Person(var name: String, var tutorial : String)
var person = Person("Chethan", "Kotlin")

person.apply { this.tutorial = "Swift" }
println(person)

Output : 
Person(name = Chethan, tutorial = Swift)

apply vs also : apply return modifed version of object reference , but also returns called object. 

Kotlin with : 

with is used to change instance properties without the need to call dot operator over the reference every time.

with is used to change instance properties without the need to call dot operator over the reference every time.

